generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  username  String     @unique
  password  String
  fullName  String
  role      String
  email     String?    @unique
  phone     String?    @unique
  isActive  Boolean
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Image     UserImage?
}

model UserImage {
  id        String   @id @default(cuid())
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}

model Book {
  id              String      @id @default(cuid())
  title           String
  authorName      String
  price           Int?
  stock           Int?
  publisher       String
  description     String?
  printType       String
  numberOfPages   Int
  imageDirectory  String?
  isbn            String
  publicationYear Int
  slug            String      @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Categories      Category[]
  Images          BookImage[]
}

model BookImage {
  id        String   @id @default(cuid())
  fileName  String
  url       String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookId    String?
  Book      Book?    @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Books     Book[]
}

model Banner {
  id        String   @id @default(cuid())
  fileName  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FooterInfo {
  id        String           @id @default(cuid())
  label     String           @unique
  value     String
  fileName  String?
  url       String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  Group     FooterInfoGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String?
}

model FooterInfoGroup {
  id          String       @id @default(cuid())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  FooterInfos FooterInfo[]
}
