type Query {
  books: [Book]
  book(bookId: ID, slug: ID): Book
  bookcategory(categoryId: ID!): BookCategory
  bookcategories: [BookCategory] 
}

type Mutation {
  addBook(data: addBookInput!): Book @auth(requires: ADMIN)
  updateBook(data: updateBookInput!): Book @auth(requires: ADMIN)
  deleteBook(bookId: ID!): Book @auth(requires: ADMIN)
  addBookCategory(data: addBookCategoryInput!): BookCategory @auth(requires: ADMIN)
  updateBookCategory (data: updateBookCategoryInput!): BookCategory @auth(requires: ADMIN)
  deleteBookCategory(categoryId: ID!): BookCategory @auth(requires: ADMIN)
}

input addBookInput {
  title: String!
  authorName: String!
  price: Int!
  stock: Int!
  publisher: String!
  description: String!
  printType: String!
  numberOfPages: Int!
  isbn: String!
}

input updateBookInput {
  bookId: ID!
  title: String
  authorName: String
  price: Int
  stock: Int
  publisher: String
  description: String
  printType: String
  numberOfPages: Int
  isbn: String
}

type deleteBook {
  id: String
  title: String
  authorName: String
  price: Int
  numberOfPages: Int
  stock: Int
  publisher: String
  description: String
  printType: String
  isbn: String
  slug: String
  createdAt: Date
  updatedAt: Date
}

type Book {
  id: String
  title: String
  authorName: String
  price: Int
  numberOfPages: Int
  stock: Int
  publisher: String
  description: String
  Images: [BookImage]
  Categories: [BookCategory]
  printType: String
  isbn: String
  slug: String
  createdAt: Date
  updatedAt: Date
}

type BookCategory {
  id: String
  nameId: String
  nameEn: String
  books: [Book]
  createdAt: Date
  updatedAt: Date
}

type BookImage {
  id: String
  publicId: String
  type: String
  url: String
  secureUrl: String
  createdAt: Date
  updatedAt: Date
}

input addBookCategoryInput {
  nameId: String!
  nameEn: String!
}

input updateBookCategoryInput {
  categoryId: ID!
  nameId: String
  nameEn: String
}